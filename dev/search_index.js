var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"Author = \"Jakob AsslÃ¤nder\"\nCurrentModule = BartIO","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"In the following, you find the documentation of all exported functions of the BartIO.jl package:","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [BartIO]","category":"page"},{"location":"api/#BartIO.bart-Tuple{Int64, Any, Vararg{Array{ComplexF32, N} where N, N} where N}","page":"API","title":"BartIO.bart","text":"bart = wrapper_bart(pathtobart::String)\nArgs are concatenated at the end of the command.\n\n### output\n- bart : a wrapper to call bart from Julia through the python functions from the bart repository.\n\nTO DO :\n- add kwargs support like in the python wrapper https://github.com/mrirecon/bart/pull/295\n\nExample :\n````\nbart = wrapper_bart(pathtobart)\nbart(0,\"version\")\n\nbart(0,\"phantom -h\")\nbart(1,\"phantom -k -x128\")\n````\n\n\n\n\n\n","category":"method"},{"location":"api/#BartIO.read_cfl-Tuple{String}","page":"API","title":"BartIO.read_cfl","text":"read_cfl(filename::String)\n\nread_cfl(filename(no extension)) -> Array{ComplexF32,N} where N is defined the filename.hdr file\nread_cfl(filename.cfl) -> Array{ComplexF32,N} where N is defined the filename.hdr file\nread_cfl(filename.hdr) -> Array{ComplexF32,N} where N is defined the filename.hdr file\n\nReads complex data from files created by the Berkeley Advanced Reconstruction Toolbox (BART). The output is an Array of ComplexF32 with the dimensions stored in a .hdr file.\n\nParameters:\n\nfilename:   path and filename of the cfl and hdr files, which can either be without extension, end on .cfl, or end on .hdr\n\n\n\n\n\n","category":"method"},{"location":"api/#BartIO.set_bart_path-Tuple{String}","page":"API","title":"BartIO.set_bart_path","text":"set_bart_path(pathToBart::String)\n\nDefine the path to the BART toolbox (store in ENV[\"TOOLBOX_PATH\"])\n\n\n\n\n\n","category":"method"},{"location":"api/#BartIO.write_cfl-Tuple{String, Array{ComplexF32, N} where N}","page":"API","title":"BartIO.write_cfl","text":"write_cfl(filename::String,dataCfl::Array{ComplexF32})\n\nwrite_cfl(filename(no extension),Array{ComplexF32})\nwrite_cfl(filename.cfl, Array{ComplexF32})\nwrite_cfl(filename.hdr,Array{ComplexF32})\n\nWrite complex data to files following the convention of the Berkeley Advanced Reconstruction Toolbox (BART). The input is an Array of ComplexF32 with the dimensions stored in a .hdr file.\n\nParameters:\n\nfilename:   path and filename of the cfl and hdr files, which can either be without extension, end on .cfl, or end on .hdr\nArray{ComplexF32,N}:   Array of ComplexF32 corresponding to image/k-space\n\n\n\n\n\n","category":"method"},{"location":"#BartIO.jl-documentation","page":"Home","title":"BartIO.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BartIO.jl is a Julia package in order to interact with the Berkeley Advanced Reconstruction Toolbox (BART).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package offers the possibility to","category":"page"},{"location":"","page":"Home","title":"Home","text":"read and write cfl/hdr files used by BART\nCall BART command (requires a BART installation)","category":"page"},{"location":"#Read-and-write-files","page":"Home","title":"Read & write files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To load BART data (stored in a .cfl and a .hdr header file), simply call read_cfl(filename), where filename can be either be without a filename extension, or it can include .cfl or .hdr.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To write BART compatible files, call  write_cfl(filename, x), where filename can be either be without a filename extension, or it can include .cfl or .hdr and x is the data.","category":"page"},{"location":"#Calling-BART-functions","page":"Home","title":"Calling BART functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BartIO replicates the functionality of the Python wrapper","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BART has to be installed/compiled.","category":"page"},{"location":"#Setup","page":"Home","title":"Setup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You will have to tell BartIO.jl where to find the BART executable:","category":"page"},{"location":"","page":"Home","title":"Home","text":"    using BartIO\n    set_bart_path(\"/path/to/bart\")","category":"page"},{"location":"#How-to-use-BartIO.jl","page":"Home","title":"How to use BartIO.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BART functions ca be called, e.g., by either of the to calls:","category":"page"},{"location":"","page":"Home","title":"Home","text":"bart(0,\"version\")\nk_phant = bart(1,\"phantom -x64 -k\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the first example, the leading argument 0 indicates that bart will not return anything. In the second example, the leading 1 indicates that bart will return 1 object. For certain functions, you will have provide BART with data, which can be done in the following way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"traj = bart(1,\"traj -x 128 -y 256 -r\")\nk_phant = bart(1,\"phantom -k -t\", traj)\nim_phant = bart(1,\"nufft -i\", traj, k_phant)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where traj and k_phant are arrays of ComplexF32 (BART works with single precision). Note, if you pass multiple arguments, they are concatenated at the end of the command line. The last 2 lines are equivalent to the command line call","category":"page"},{"location":"","page":"Home","title":"Home","text":"bart phantom -k -t traj k_phant\nbart nufft -i traj k_phant im_phant","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively you can pass optional arrays with keywords","category":"page"},{"location":"","page":"Home","title":"Home","text":"k_phant = bart(1,\"phantom -k\", t=traj)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To print all available BART functions, you can call bart() without arguments:","category":"page"},{"location":"","page":"Home","title":"Home","text":"bart()","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you need help for the function you can use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"bart(0,\"pics -h\")","category":"page"},{"location":"#Alternatives","page":"Home","title":"Alternatives","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As an alternative, you can, from within Julia, manually perform a system call of BART:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pathto_bart_exec=\"/home/CODE/bart-master/bart\"\nrun(`$pathto_bart_exec version`)","category":"page"}]
}
